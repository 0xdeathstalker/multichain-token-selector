{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "token-selector",
  "type": "registry:component",
  "title": "Token Selector Component",
  "description": "A multichain token selector",
  "dependencies": [
    "viem",
    "numeral"
  ],
  "devDependencies": [
    "@types/numeral"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "drawer",
    "command",
    "skeleton"
  ],
  "files": [
    {
      "path": "registry/token-selector/components/token-selector.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerTrigger,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerContent,\n} from \"@/components/ui/drawer\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useEvmTokenBalances } from \"@/registry/token-selector/hooks/useTokenBalances\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  formatNumber,\n  formatTokenAmount,\n  tokenKey,\n} from \"@/registry/token-selector/lib/format\";\nimport { ChainIds } from \"@/constants/chains\";\nimport { ChevronsUpDown } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { ChainTokenLogo } from \"./chain-token-logo\";\nimport { useMediaQuery } from \"@/registry/token-selector/hooks/useMediaQuery\";\nimport { Token } from \"../lib/types/api\";\n\nexport interface TokenSelectorProps {\n  token?: Token;\n  defaultToken?: Token;\n  onTokenChange: React.Dispatch<React.SetStateAction<Token | undefined>>;\n  name?: string;\n  disabled?: boolean;\n  required?: boolean;\n  form?: string;\n  wallet?: string;\n  chainId?: ChainIds[];\n  excludeSpamTokens?: boolean;\n  excludeTokens?: string[];\n  className?: string;\n}\n\nexport interface TokenListItemProps {\n  itemKey: string;\n  selectedToken: Token | undefined;\n  setSelectedToken: React.Dispatch<React.SetStateAction<Token | undefined>>;\n  token: Token;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst TokenSelector: React.FC<TokenSelectorProps> = (props) => {\n  const isDesktop = useMediaQuery(\"(min-width: 640px)\");\n\n  const [open, setOpen] = useState<boolean>(false);\n\n  const { data, isLoading: isBalancesLoading } = useEvmTokenBalances(\n    props.wallet as `0x${string}`,\n    {\n      excludeSpamTokens: props.excludeSpamTokens,\n      chainIds: props.chainId ? props.chainId[0] : undefined,\n    }\n  );\n  const balances = data?.balances;\n\n  if (isDesktop) {\n    return (\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-[200px] justify-between text-xs\"\n          >\n            <div className=\"inline-flex items-center gap-2\">\n              {props.token?.address && <ChainTokenLogo token={props.token} />}\n              {props.token ? props.token.symbol : \"Select token...\"}\n            </div>\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </DialogTrigger>\n\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"text-sm\">Select a token</DialogTitle>\n          </DialogHeader>\n\n          <TokenSelection\n            isBalancesLoading={isBalancesLoading}\n            balances={balances}\n            selectedToken={props.token}\n            onSelectedTokenChange={props.onTokenChange}\n            setOpen={setOpen}\n          />\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Drawer open={open} onOpenChange={setOpen}>\n      <DrawerTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-[200px] justify-between text-xs\"\n        >\n          <div className=\"inline-flex items-center gap-2\">\n            {props.token?.address && <ChainTokenLogo token={props.token} />}\n            {props.token ? props.token.symbol : \"Select token...\"}\n          </div>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </DrawerTrigger>\n\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle className=\"text-sm\">Select a token</DrawerTitle>\n        </DrawerHeader>\n\n        <div className=\"px-4 pb-4\">\n          <TokenSelection\n            isBalancesLoading={isBalancesLoading}\n            balances={balances}\n            selectedToken={props.token}\n            onSelectedTokenChange={props.onTokenChange}\n            setOpen={setOpen}\n          />\n        </div>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nconst TokenSelection: React.FC<{\n  isBalancesLoading: boolean;\n  balances: Array<Token> | undefined;\n  selectedToken: Token | undefined;\n  onSelectedTokenChange: React.Dispatch<\n    React.SetStateAction<Token | undefined>\n  >;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({\n  isBalancesLoading,\n  balances,\n  selectedToken,\n  onSelectedTokenChange,\n  setOpen,\n}) => {\n  return (\n    <Command\n      defaultValue=\"-\" // to avoid default selected item\n      className=\"min-h-[340px] max-h-[45svh] bg-transparent border\"\n    >\n      <CommandInput placeholder=\"Search token...\" className=\"text-xs\" />\n      <CommandList>\n        {!isBalancesLoading && (\n          <CommandEmpty className=\"text-xs text-center py-3\">\n            No token found.\n          </CommandEmpty>\n        )}\n\n        {isBalancesLoading ? (\n          <div className=\"p-2\">\n            {Array.from({ length: 7 }).map((_, i) => (\n              <div key={i} className=\"flex items-center gap-2 p-2\">\n                <Skeleton className=\"h-6 min-w-6 rounded-full\" />\n                <div className=\"w-full flex items-center justify-between\">\n                  <Skeleton className=\"h-4 w-14\" />\n                  <Skeleton className=\"h-4 w-24\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <CommandGroup>\n            {balances?.map((token) => {\n              const key = tokenKey(token);\n              return (\n                <TokenListItem\n                  key={key}\n                  itemKey={key}\n                  token={token}\n                  selectedToken={selectedToken}\n                  setSelectedToken={onSelectedTokenChange}\n                  setOpen={setOpen}\n                />\n              );\n            })}\n          </CommandGroup>\n        )}\n      </CommandList>\n    </Command>\n  );\n};\n\nconst TokenListItem: React.FC<TokenListItemProps> = ({\n  itemKey,\n  selectedToken,\n  setSelectedToken,\n  token,\n  setOpen,\n}) => {\n  const isSelected = selectedToken && tokenKey(selectedToken) === itemKey;\n  return (\n    <CommandItem\n      value={itemKey}\n      onSelect={() => {\n        setSelectedToken(token);\n        setOpen(false);\n      }}\n      className={cn(\n        \"flex gap-2 cursor-pointer text-xs border\",\n        isSelected ? \"border-border bg-secondary\" : \"border-transparent\"\n      )}\n    >\n      <ChainTokenLogo token={token} />\n      {token.symbol}\n      <div className=\"ml-auto flex items-center gap-1 font-mono\">\n        <span>\n          {formatTokenAmount(BigInt(token.amount), token.decimals ?? 18)}\n        </span>\n        <span className=\"max-w-[5rem] inline-flex items-center\">\n          (<p className=\"truncate\">${formatNumber(token.value_usd ?? \"-\")}</p>)\n        </span>\n      </div>\n    </CommandItem>\n  );\n};\n\nexport default TokenSelector;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/token-selector/components/chain-token-logo.tsx",
      "content": "/* eslint-disable @next/next/no-img-element */\nimport { ChainIds, Chains } from \"@/constants/chains\";\nimport {\n  getChainImagePath,\n  getTokenLogoURI,\n} from \"@/registry/token-selector/lib/logo\";\nimport { Token } from \"../lib/types/api\";\n\nconst ChainTokenLogo = ({ token }: { token: Token }) => {\n  return (\n    <div className=\"relative dark:bg-neutral-600 bg-neutral-200 flex items-center justify-center rounded-3xl p-0.5\">\n      <img\n        src={getTokenLogoURI(\n          token.address as `0x${string}`,\n          token.chain as Chains\n        )}\n        alt=\"\"\n        width={20}\n        height={20}\n        className=\"inline-block h-5 w-5 rounded-full\"\n        onError={(e) => {\n          (e.target as HTMLImageElement).onerror = null;\n          (e.target as HTMLImageElement).src =\n            \"https://routernitro.com/images/unknown.png\";\n        }}\n      />\n      <img\n        src={getChainImagePath(token.chain_id)}\n        alt=\"\"\n        width={12}\n        height={12}\n        className=\"absolute -bottom-0.5 -right-0.5 inline-block h-3 w-3 rounded-full\"\n        onError={(e) => {\n          (e.target as HTMLImageElement).onerror = null;\n          (e.target as HTMLImageElement).src =\n            \"https://routernitro.com/images/unknown.png\";\n        }}\n      />\n    </div>\n  );\n};\n\nconst ChainLogo = ({ chainId }: { chainId: ChainIds }) => {\n  return (\n    <div className=\"dark:bg-neutral-600 bg-neutral-200 rounded-3xl p-0.5\">\n      <img src={getChainImagePath(chainId)} alt=\"\" width={20} height={20} />\n    </div>\n  );\n};\n\nexport { ChainLogo, ChainTokenLogo };\n",
      "type": "registry:component"
    },
    {
      "path": "registry/token-selector/components/dune-provider.tsx",
      "content": "\"use client\";\n\nimport React, { createContext, useContext } from \"react\";\n\ninterface DuneContextType {\n  duneApiKey?: string;\n  proxyUrl?: string;\n}\n\nconst DuneContext = createContext<DuneContextType>({\n  duneApiKey: \"\",\n});\n\nexport const useDuneContext = () => {\n  const context = useContext(DuneContext);\n  if (!context) {\n    throw new Error(\"useDuneContext must be used within a DuneProvider\");\n  }\n  return context;\n};\n\nexport const useGetApiKey = () => {\n  const context = useDuneContext();\n  return context.duneApiKey;\n};\n\nexport const useGetProxyUrl = () => {\n  const context = useDuneContext();\n  return context.proxyUrl;\n};\n\ntype DuneProviderProps =\n  | { duneApiKey: string; proxyUrl?: never; children: React.ReactNode }\n  | { duneApiKey?: never; proxyUrl: string; children: React.ReactNode };\n\nexport const DuneProvider = (props: DuneProviderProps) => {\n  const duneApiKey = \"duneApiKey\" in props ? props.duneApiKey : undefined;\n  const proxyUrl = \"proxyUrl\" in props ? props.proxyUrl : undefined;\n\n  return (\n    <DuneContext.Provider value={{ duneApiKey, proxyUrl }}>\n      {props.children}\n    </DuneContext.Provider>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "registry/token-selector/constants/chains.ts",
      "content": "export const CHAIN_IDS = {\n  // evm\n  ethereum: \"1\",\n  polygon: \"137\",\n  arbitrum: \"42161\",\n  optimism: \"10\",\n  zksync: \"324\",\n  avalanche: \"43114\",\n  binance: \"56\",\n  polygon_zkevm: \"1101\",\n  manta: \"169\",\n  scroll: \"534352\",\n  mantle: \"5000\",\n  base: \"8453\",\n  linea: \"59144\",\n} as const;\n\nexport type Chains = keyof typeof CHAIN_IDS;\nexport type ChainIds = (typeof CHAIN_IDS)[keyof typeof CHAIN_IDS];\n\nexport const CHAINS = Object.keys(CHAIN_IDS).reduce((acc, curr) => {\n  acc[CHAIN_IDS[curr as keyof typeof CHAIN_IDS]] =\n    curr as keyof typeof CHAIN_IDS;\n  return acc;\n}, {} as Record<ChainIds, keyof typeof CHAIN_IDS>);\n\nexport const MAINNET_SUPPORTED_CHAINS: Record<string, ChainIds> = {\n  ethereum: CHAIN_IDS.ethereum,\n  polygon: CHAIN_IDS.polygon,\n  arbitrum: CHAIN_IDS.arbitrum,\n  optimism: CHAIN_IDS.optimism,\n  zksync: CHAIN_IDS.zksync,\n  avalanche: CHAIN_IDS.avalanche,\n  binance: CHAIN_IDS.binance,\n  polygon_zkevm: CHAIN_IDS.polygon_zkevm,\n  manta: CHAIN_IDS.manta,\n  scroll: CHAIN_IDS.scroll,\n  mantle: CHAIN_IDS.mantle,\n  base: CHAIN_IDS.base,\n  linea: CHAIN_IDS.linea,\n};\n",
      "type": "registry:file",
      "target": "src/constants/chains.ts"
    },
    {
      "path": "registry/token-selector/hooks/useDeepMemo.ts",
      "content": "// Based on this hook from Apollo:\n// https://github.com/apollographql/apollo-client/blob/master/src/react/hooks/utils/useDeepMemo.ts\n\nimport { useRef } from \"react\";\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>({ key, value: memoFn() });\n\n  if (ref.current === undefined || !deepEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n\n// Custom deep equality function\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction deepEqual(obj1: any, obj2: any): boolean {\n  if (obj1 === obj2) return true;\n  if (\n    typeof obj1 !== \"object\" ||\n    obj1 === null ||\n    typeof obj2 !== \"object\" ||\n    obj2 === null\n  )\n    return false;\n\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  if (keys1.length !== keys2.length) return false;\n\n  for (const key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) return false;\n  }\n\n  return true;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/hooks/useIsomorphicLayoutEffect.ts",
      "content": "import { useEffect, useLayoutEffect } from \"react\";\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/hooks/useMediaQuery.ts",
      "content": "import { useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@/registry/token-selector/hooks/useIsomorphicLayoutEffect\";\n\ntype UseMediaQueryOptions = {\n  defaultValue?: boolean;\n  initializeWithValue?: boolean;\n};\n\nconst IS_SERVER = typeof window === \"undefined\";\n\nexport function useMediaQuery(\n  query: string,\n  {\n    defaultValue = false,\n    initializeWithValue = true,\n  }: UseMediaQueryOptions = {}\n): boolean {\n  const getMatches = (query: string): boolean => {\n    if (IS_SERVER) {\n      return defaultValue;\n    }\n    return window.matchMedia(query).matches;\n  };\n\n  const [matches, setMatches] = useState<boolean>(() => {\n    if (initializeWithValue) {\n      return getMatches(query);\n    }\n    return defaultValue;\n  });\n\n  // Handles the change event of the media query.\n  function handleChange() {\n    setMatches(getMatches(query));\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    const matchMedia = window.matchMedia(query);\n\n    // Triggered at the first client-side load and if query changes\n    handleChange();\n\n    // Using deprecated `addListener` and `removeListener` to support Safari < 14 (#135)\n    if (matchMedia.addListener) {\n      matchMedia.addListener(handleChange);\n    } else {\n      matchMedia.addEventListener(\"change\", handleChange);\n    }\n\n    return () => {\n      if (matchMedia.removeListener) {\n        matchMedia.removeListener(handleChange);\n      } else {\n        matchMedia.removeEventListener(\"change\", handleChange);\n      }\n    };\n  }, [query]);\n\n  return matches;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/hooks/useTokenBalances.ts",
      "content": "import { useEffect, useState } from \"react\";\n\nimport { CHAINS } from \"@/constants/chains\";\nimport {\n  useGetApiKey,\n  useGetProxyUrl,\n} from \"@/registry/token-selector/components/dune-provider\";\nimport { useDeepMemo } from \"@/registry/token-selector/hooks/useDeepMemo\";\nimport { fetchEvmBalances } from \"@/registry/token-selector/lib/dune-api\";\nimport { BalanceData, FetchError, TokensParams } from \"@/lib/types/api\";\nimport { isAddress } from \"viem\";\n\nexport const useEvmTokenBalances = (\n  walletAddress: string,\n  params: TokensParams = {}\n) => {\n  const [state, setState] = useState<{\n    data: BalanceData | null;\n    error: FetchError | null;\n    isLoading: boolean;\n    nextOffset: string | null; // Track next_offset\n    offsets: string[]; // Store offsets for each page\n    currentPage: number; // Track the current page\n  }>({\n    data: null,\n    error: null,\n    isLoading: false,\n    nextOffset: null, // Next offset from the API\n    offsets: [], // List of offsets corresponding to pages\n    currentPage: 0, // Start at the first page\n  });\n\n  const memoizedParams = useDeepMemo(() => params, params);\n  const apiKey = useGetApiKey();\n  const proxyUrl = useGetProxyUrl();\n\n  // Function to fetch data for a specific page\n  const fetchDataAsync = async (offset: string | null) => {\n    if (!apiKey && !proxyUrl) {\n      setState({\n        data: null,\n        error: new Error(\"One of duneApiKey or proxyUrl must be provided\"),\n        isLoading: false,\n        nextOffset: null,\n        offsets: [],\n        currentPage: 0,\n      });\n      return;\n    }\n\n    if (!walletAddress || !isAddress(walletAddress)) return;\n\n    setState((prevState) => ({ ...prevState, isLoading: true }));\n\n    try {\n      // Convert offset to number or undefined\n      const updatedParams = {\n        ...memoizedParams,\n        offset: offset ?? undefined,\n      };\n\n      const result = await fetchEvmBalances(\n        walletAddress,\n        updatedParams,\n        apiKey,\n        proxyUrl\n      );\n\n      for (const token of result.balances) {\n        if (token.chain === \"avalanche_c\") {\n          token.chain = CHAINS[token.chain_id];\n        }\n        if (token.chain === \"zkevm\") {\n          token.chain = CHAINS[token.chain_id];\n        }\n      }\n\n      setState((prevState) => ({\n        ...prevState,\n        data: result,\n        error: null,\n        isLoading: false,\n        nextOffset: result.next_offset || null,\n        offsets: offset ? [...prevState.offsets, offset] : prevState.offsets,\n      }));\n    } catch (err) {\n      setState({\n        data: null,\n        error: err as FetchError,\n        isLoading: false,\n        nextOffset: null,\n        offsets: [],\n        currentPage: 0,\n      });\n    }\n  };\n\n  // Trigger fetch when walletAddress or params change\n  useEffect(() => {\n    // Fetch the first page on initial load or when walletAddress changes\n    fetchDataAsync(null);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [walletAddress, memoizedParams, apiKey]);\n\n  // Function to go to the next page\n  const nextPage = () => {\n    if (state.nextOffset) {\n      fetchDataAsync(state.nextOffset); // Fetch using the next offset\n      setState((prevState) => ({\n        ...prevState,\n        currentPage: prevState.currentPage + 1, // Update page number\n      }));\n    }\n  };\n\n  // Function to go to the previous page\n  const previousPage = () => {\n    if (state.currentPage > 0) {\n      // Use the offset corresponding to the previous page\n      const previousOffset = state.offsets[state.currentPage - 1];\n      fetchDataAsync(previousOffset);\n      setState((prevState) => ({\n        ...prevState,\n        currentPage: prevState.currentPage - 1,\n      }));\n    }\n  };\n\n  return {\n    ...state,\n    nextPage,\n    previousPage,\n  };\n};\n\n/** @deprecated */\nexport const useTokenBalances = useEvmTokenBalances;\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/token-selector/lib/dune-api.ts",
      "content": "import { removeTrailingSlash } from \"@/registry/token-selector/lib/format\";\nimport {\n  BalanceData,\n  TokensParams,\n  TransactionData,\n  TransactionsParams,\n} from \"@/lib/types/api\";\n\nconst BASE_URL = \"https://api.dune.com\";\nconst BALANCES_PREFIX = \"api/echo/v1/balances/evm\";\nconst TRANSACTIONS_PREFIX = \"api/echo/v1/transactions/evm\";\n\nconst getBalanceQueryParams = (params: TokensParams): URLSearchParams => {\n  const queryParams = new URLSearchParams();\n  if (params.allChains) queryParams.append(\"all_chains\", \"true\");\n  if (params.chainIds) queryParams.append(\"chain_ids\", params.chainIds);\n  if (params.excludeSpamTokens)\n    queryParams.append(\"exclude_spam_tokens\", \"true\");\n  if (params.filters) queryParams.append(\"filters\", params.filters);\n  if (params.offset) queryParams.append(\"offset\", params.offset.toString());\n  if (params.limit) queryParams.append(\"limit\", params.limit.toString());\n  if (params.metadata) queryParams.append(\"metadata\", \"logo,url\");\n  return queryParams;\n};\n\nconst getTransactionsQueryParams = (\n  params: TransactionsParams\n): URLSearchParams => {\n  const queryParams = new URLSearchParams();\n  if (params.chainIds) queryParams.append(\"chain_ids\", params.chainIds);\n  if (params.offset) queryParams.append(\"offset\", params.offset.toString());\n  if (params.limit) queryParams.append(\"limit\", params.limit.toString());\n  if (params.method_id) queryParams.append(\"method_id\", params.method_id);\n  if (params.to) queryParams.append(\"to\", params.to);\n  if (params.decode) queryParams.append(\"decode\", params.decode.toString());\n  return queryParams;\n};\n\nconst getHeaders = (duneApiKey: string | undefined) => {\n  return duneApiKey\n    ? {\n        \"x-dune-api-key\": duneApiKey,\n      }\n    : undefined;\n};\n\nexport async function fetchEvmBalances(\n  walletAddress: string,\n  params: TokensParams,\n  duneApiKey: string | undefined,\n  proxyUrl: string | undefined\n): Promise<BalanceData> {\n  const queryParams = getBalanceQueryParams(params);\n\n  if (proxyUrl) {\n    proxyUrl = removeTrailingSlash(proxyUrl);\n  }\n\n  const apiUrl = `${\n    proxyUrl || BASE_URL\n  }/${BALANCES_PREFIX}/${walletAddress}?${queryParams.toString()}`;\n\n  const response = await fetch(apiUrl, {\n    method: \"GET\",\n    headers: getHeaders(duneApiKey),\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n}\n\n/** @deprecated */\nexport const fetchBalances = fetchEvmBalances;\n\nexport async function fetchEvmTransactions(\n  walletAddress: string,\n  params: TransactionsParams,\n  duneApiKey: string | undefined,\n  proxyUrl: string | undefined\n): Promise<TransactionData> {\n  const queryParams = getTransactionsQueryParams(params);\n  const apiUrl = `${\n    proxyUrl || BASE_URL\n  }/${TRANSACTIONS_PREFIX}/${walletAddress}?${queryParams.toString()}`;\n\n  const response = await fetch(apiUrl, {\n    method: \"GET\",\n    headers: getHeaders(duneApiKey),\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n}\n\n/** @deprecated */\nexport const fetchTransactions = fetchEvmTransactions;\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/token-selector/lib/format.ts",
      "content": "import numeral from \"numeral\";\nimport { formatUnits } from \"viem\";\nimport { Token } from \"@/registry/token-selector/components/token-selector\";\n\nexport const formatTokenAmount = (\n  _amount: bigint | string,\n  _decimals: number = 18\n) => {\n  if (!_amount) return \"0\";\n  if (typeof _amount === \"string\") {\n    _amount = BigInt(_amount);\n  }\n  return formatNumber(formatUnits(_amount, _decimals));\n};\n\nexport const formatNumber = (number: number | string) => {\n  if (typeof number === \"string\") {\n    number = parseFloat(number);\n  }\n\n  if (isNaN(number)) {\n    return \"-\";\n  }\n\n  if (number === 0) {\n    return \"0\";\n  }\n\n  if (number >= 1) {\n    if (number > 99999) {\n      return numeral(number).format(\"0.[000]a\");\n    }\n    if (number > 9999) {\n      return numeral(number).format(\"0.[00]a\");\n    }\n    return numeral(number).format(\"0.[000]a\");\n  }\n  if (number < 0.0001) {\n    return \"<0.0001\";\n  }\n  if (number < 0.001) {\n    return numeral(number).format(\"0.0[0000]\");\n  }\n  if (number < 1) {\n    return numeral(number).format(\"0.00[00]\");\n  }\n\n  return numeral(number).format(\"0.[00]\");\n};\n\nexport const tokenKey = (token: Token) =>\n  `${token.chain}:${token.address}:${token.symbol}`;\n\nexport function removeTrailingSlash(url: string) {\n  return url.endsWith(\"/\") ? url.slice(0, -1) : url;\n}\n\nexport function capitalize(word: string) {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/token-selector/lib/logo.ts",
      "content": "import { Chains, ChainIds } from \"@/constants/chains\";\nimport { getAddress } from \"viem\";\nimport { Token } from \"../lib/types/api\";\n\nexport const isTokenNative = (address: string) =>\n  address &&\n  (address === \"native\" ||\n    address.toLowerCase() === \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\");\n\nexport function getChainImagePath(chainId: ChainIds) {\n  return `https://assets.relay.link/icons/${chainId}/light.png`;\n}\n\nexport const getTokenLogoURI = (address: `0x${string}`, chain: Chains) => {\n  if (!address) return \"\";\n  if (isTokenNative(address))\n    if (TRUST_WALLET_EXCEPTIONS[chain])\n      return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/${TRUST_WALLET_EXCEPTIONS[chain]}/info/logo.png`;\n    else\n      return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/${chain}/info/logo.png`;\n  if (chain === \"linea\") return lineaTokenLogoURIs[address];\n\n  const logoUri =\n    \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains\";\n\n  if (TRUST_WALLET_EXCEPTIONS[chain]) {\n    return `${logoUri}/${TRUST_WALLET_EXCEPTIONS[chain]}/assets/${getAddress(\n      address\n    )}/logo.png`;\n  }\n\n  return `${logoUri}/${chain}/assets/${getAddress(address)}/logo.png`;\n};\n\nexport const TRUST_WALLET_EXCEPTIONS: { [key in Chains]?: string } = {\n  polygon_zkevm: \"polygonzkevm\",\n  avalanche: \"avalanchec\",\n  binance: \"smartchain\",\n};\n\nconst lineaTokenLogoURIs: {\n  [address: `0x${string}`]: string;\n} = {\n  \"0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f\":\n    \"https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg\",\n  \"0x7d43aabc515c356145049227cee54b608342c0ad\":\n    \"https://s2.coinmarketcap.com/static/img/coins/64x64/4687.png\",\n  \"0xf5C6825015280CdfD0b56903F9F8B5A2233476F5\":\n    \"https://s2.coinmarketcap.com/static/img/coins/64x64/1839.png\",\n  \"0x5471ea8f739dd37E9B81Be9c5c77754D8AA953E4\":\n    \"https://s2.coinmarketcap.com/static/img/coins/64x64/5805.png\",\n  \"0x265B25e22bcd7f10a5bD6E6410F10537Cc7567e8\":\n    \"https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png\",\n  \"0x997BF0ebF2a2a2e8189493cedFd19bCDb077c0d0\":\n    \"https://noobysswap.io/assets/images/nbs_logo.png\",\n  \"0x9201f3b9DfAB7C13Cd659ac5695D12D605B5F1e6\":\n    \"https://echodex.io/images/coins/ecp.png\",\n  \"0x0963a1aBAF36Ca88C21032b82e479353126A1C4b\":\n    \"https://raw.githubusercontent.com/LeetSwap/tokenlist/master/logos/leet.png\",\n  \"0x9dd6ea6f9d1fba5ed640651f06802e32ff455221\":\n    \"https://i.ibb.co/NNzQ46L/Lin.png\",\n  \"0x6C6470898882b65E0275723D883A0D877aADe43f\":\n    \"https://cryptologos.cc/logos/tether-usdt-logo.png?v=025\",\n  \"0x66627F389ae46D881773B7131139b2411980E09E\":\n    \"https://cryptologos.cc/logos/usd-coin-usdc-logo.png?v=025\",\n  \"0x60D01EC2D5E98Ac51C8B4cF84DfCCE98D527c747\":\n    \"https://assets.coingecko.com/coins/images/21791/small/izumi-logo-symbol.png?1640053924\",\n  \"0x0B1A02A7309dFbfAD1Cd4adC096582C87e8A3Ac1\":\n    \"https://i.ibb.co/QJjY1Dd/Circle-logo-black.png\",\n  \"0x7f5373AE26c3E8FfC4c77b7255DF7eC1A9aF52a6\":\n    \"https://i.ibb.co/GQKtJb3/uusdt-D-3x.png\",\n  \"0xEB466342C4d449BC9f53A865D5Cb90586f405215\":\n    \"https://i.ibb.co/DRYxg4N/uausdc-L-3x.png\",\n  \"0x176211869cA2b568f2A7D4EE941E073a821EE1ff\":\n    \"https://seeklogo.com/images/U/usd-coin-usdc-logo-CB4C5B1C51-seeklogo.com.png\",\n  \"0x3aAB2285ddcDdaD8edf438C1bAB47e1a9D05a9b4\":\n    \"https://thumbs.dreamstime.com/b/wrapped-bitcoin-wbtc-token-symbol-cryptocurrency-logo-coin-icon-isolated-white-background-wrapped-bitcoin-wbtc-token-symbol-219820880.jpg\",\n  \"0xA219439258ca9da29E9Cc4cE5596924745e12B93\":\n    \"https://cryptologos.cc/logos/tether-usdt-logo.png\",\n  \"0x4AF15ec2A0BD43Db75dd04E62FAA3B8EF36b00d5\":\n    \"https://cryptologos.cc/logos/multi-collateral-dai-dai-logo.png\",\n  \"0x2140Ea50bc3B6Ac3971F9e9Ea93A1442665670e4\":\n    \"https://i.ibb.co/zmGrR16/500-500-px.png\",\n  \"0x13a7F090D46C74acBA98c51786a5c46eD9A474F0\":\n    \"https://i.ibb.co/12Fy3g1/Ava-Scamfari.png\",\n  \"0xB79DD08EA68A908A97220C76d19A6aA9cBDE4376\":\n    \"https://i.ibb.co/khhLbd7/Group-27795.png\",\n  \"0x2f0b4300074afc01726262d4cc9c1d2619d7297a\":\n    \"https://i.ibb.co/w0m0KsN/image-2023-11-15-16-59-48.jpg\",\n  \"0xcc22F6AA610D1b2a0e89EF228079cB3e1831b1D1\":\n    \"https://linea.velocore.xyz/assets/LVC-8ac4b844.svg\",\n};\n\nexport const tokenKey = (token: Token) =>\n  `${token.chain}:${token.address}:${token.symbol}`;\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/token-selector/lib/types/api.ts",
      "content": "import { ChainIds } from \"@/constants/chains\";\n\nexport type Token = {\n  chain: string;\n  chain_id: ChainIds;\n  address: string;\n  amount: string;\n  symbol?: string;\n  decimals?: number;\n  price_usd?: number;\n  value_usd?: number;\n};\n\nexport type BalanceData = {\n  request_time: string;\n  response_time: string;\n  wallet_address: string;\n  next_offset?: string | null;\n  balances: Token[];\n  errors?: {\n    token_errors?: {\n      address: string;\n      chain_id: number;\n      description?: string;\n    }[];\n  };\n};\n\nexport type FetchError = Error & {\n  status?: number;\n  info?: unknown;\n};\n\nexport type ResponseData = {\n  data?: BalanceData;\n  error?: FetchError;\n  isLoading: boolean;\n};\n\nexport type TokensParams = {\n  /** Specify this to get native balances for a long tail of EVM chains, where we don't support ERC20 assets */\n  allChains?: boolean;\n  /** Comma separated list of chain ids to get balances for */\n  chainIds?: string;\n  /** Specify this to exclude spam tokens from the response */\n  excludeSpamTokens?: boolean;\n  /** Specify `erc20` or `native` to get only ERC20 tokens or native assets, respectively */\n  filters?: \"erc20\" | \"native\";\n  /** Maximum number of transactions to return */\n  limit?: number;\n  /** The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here. */\n  offset?: string;\n  /** A comma separated list of additional metadata fields to include for each token. Supported values: logo, url */\n  metadata?: string | null;\n};\n\nexport type TransactionsParams = {\n  /** The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses. */\n  offset?: string | null;\n\n  /** Maximum number of transactions to return */\n  limit?: number | null;\n\n  /** Return only transactions before this block time */\n  block_time?: number | null;\n\n  /** Comma separated list of chain ids to get transactions for */\n  chainIds?: string | null;\n\n  /** Filter transactions to a given address */\n  to?: string | null;\n\n  /** Return only transactions with this method id */\n  method_id?: string | null;\n\n  /** Return abi decoded transactions and logs */\n  decode?: boolean | null;\n\n  /** Return only transactions with this address in logs */\n  log_address?: string | null;\n\n  /** Return only transactions with this topic0 */\n  topic0?: string | null;\n\n  /** Return only transactions with this block number */\n  min_block_number?: number | null;\n};\n\nexport type UseTokensConfig = {\n  queryOptions?: {\n    refetchOnWindowFocus?: boolean;\n    staleTime?: number;\n    refetchInterval?: number;\n  };\n};\n\nexport type Transaction = {\n  address: string;\n  block_hash: string;\n  block_number: string;\n  block_time: string;\n  block_version: number;\n  chain: string;\n  from: string;\n  to: string;\n  data: string;\n  gas_price: string;\n  hash: string;\n  index: string;\n  max_fee_per_gas: string;\n  max_priority_fee_per_gas: string;\n  nonce: string;\n  transaction_type: string;\n  value: string;\n};\n\nexport type TransactionData = {\n  transactions: Transaction[];\n  next_offset?: string | null;\n};\n",
      "type": "registry:file",
      "target": "src/lib/types/api.ts"
    }
  ]
}